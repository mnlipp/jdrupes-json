import aQute.bnd.osgi.Processor

buildscript {
    repositories {
        jcenter()
        mavenCentral()
		maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:3.5.0'
    }
}

plugins {
    id 'biz.aQute.bnd.builder' version "5.3.0"
    id "com.jfrog.bintray" version "1.7"
	id "org.jdrupes.mdoclet" version "1.0.3"
}

repositories {
    jcenter()
    mavenCentral()
}

apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'maven'
// Makes Eclipse-groovy handle *.gradle file properly
apply plugin:'groovy'

group = 'org.jdrupes.json'
archivesBaseName = 'json'
description = "JDrupes JSON library"

ext.releaseVersion = "2.1.0"
ext.isSnapshot = true
version = releaseVersion + (isSnapshot ? "-SNAPSHOT" : "")

// Derive bundle version and propagate to bnd
String bundleVersion = releaseVersion +
	(isSnapshot ? ".-\${tstamp}-SNAPSHOT" : ".rel")

tasks.compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

tasks.compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}    
    
jar {
	manifest {
		attributes('bundleVersion': bundleVersion)
	}
}

dependencies {
    compileOnly 'org.osgi:org.osgi.annotation:6.0.0'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.4'
    testImplementation 'junit:junit:4.12'
    testImplementation "org.codehaus.groovy:groovy-all:3.0.5"
    testImplementation "org.spockframework:spock-core:2.0-M5-groovy-3.0"

	// Use gradle mechanims to get the artifact to baseline against.
	// We baseline against the previous release (latest excluding current)
	baseline("${group}:${archivesBaseName}:(,${releaseVersion})") {
		transitive false
	}
}

// Configure sensible layout
sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
    }

    test {
        java {
            srcDir 'test'
        }
        groovy {
            srcDir 'test'
        }
        resources {
            srcDir 'resources'
        }
    }
}

jar {
	manifest {
		attributes('Bundle-Version': version)
	}
}

configurations {
    markdownDoclet
    javadocTaglets
}
 
dependencies {
    markdownDoclet "org.jdrupes.mdoclet:doclet:2.0.0"
    javadocTaglets "org.jdrupes.taglets:plantuml-taglet:2.0.0"
}

task java11doc(type: JavaExec) {
    enabled = !JavaVersion.current().isJava8()
    
    dependsOn classes
    inputs.file "overview.md"

    jvmArgs = ['--add-exports=jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED']
    classpath sourceSets.main.compileClasspath
    classpath files(tasks.jar)
    
    ext.destinationDir = file("../org.jdrupes.json.gh-pages/javadoc")
    
    main = 'jdk.javadoc.internal.tool.Main'
    args = ['-doctitle', 'JDrupes JSON library',
        '-use',
        '-linksource',
        '-link', 'https://docs.oracle.com/en/java/javase/11/docs/api/',
        '--add-exports', 'jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
        '-doclet', 'org.jdrupes.mdoclet.MDoclet',
        '-docletpath', configurations.markdownDoclet.files.asType(List).join(":"),
        '--disable-auto-highlight',
        '-tagletpath', configurations.javadocTaglets.files.asType(List).join(":"),
        '-taglet', 'org.jdrupes.taglets.plantUml.PlantUml',
        '-taglet', 'org.jdrupes.taglets.plantUml.StartUml',
        '-taglet', 'org.jdrupes.taglets.plantUml.EndUml',
        '-overview', 'overview.md',
        '-d', destinationDir,
        '-sourcepath', 'src/',
        '-subpackages', 'org.jdrupes.json',
        '-bottom', file("misc/javadoc.bottom.txt").text,
        '--allow-script-in-comments',
        '-Xdoclint:-html',
        '--add-exports=jdk.javadoc/jdk.javadoc.internal.doclets.formats.html=ALL-UNNAMED'
        ]
    
    ignoreExitValue true
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	classifier "sources"
}

task javadocJar(type: Jar) {
	dependsOn "java11doc"
	from javadoc.destinationDir
	classifier "javadoc"
}

// Allow build without signing information (e.g. travis)
if (project.hasProperty('signing.keyId')) {
	signing {
		sign configurations.archives
	}
}

// MavenPublishing (new), incomplete, works only for local. 

publishing {
	
	publications {
		mavenJava(MavenPublication) {
			artifactId = archivesBaseName
			from components.java
			artifact sourcesJar
			artifact javadocJar
		}
	}
}

// MavenPublishing (original), still needed for remote 

uploadArchives {
	dependsOn baseline
	
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
 
			pom.project {
			
				name project.name
				artifactId project.archivesBaseName
				packaging 'pom'
				description project.description
				url 'https://github.com/mnlipp/jdrupes-json'
 
				scm {
					url 'scm:git@github.com:mnlipp/jdrupes-json.git'
					connection 'scm:git@github.com:mnlipp/jdrupes-json.git'
					developerConnection 'git@github.com:mnlipp/jdrupes-json.git'
				}
 
				licenses {
					license {
						name 'LGPL 3.0'
						url 'https://www.gnu.org/licenses/lgpl-3.0.en.html'
						distribution 'repo'
					}
				}
 
				developers {
					developer {
						id 'mnlipp'
						name 'Michael N. Lipp'
					}
				}
			}
			
			artifacts {
				archives jar
				archives sourcesJar
				archives javadocJar
			}

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: project.properties['sonatypeUsername'] ?: "nouser", 
					password: project.properties['sonatypePassword'] ?: "nopass")
			}
			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: project.properties['sonatypeUsername'] ?: "nouser", 
					password: project.properties['sonatypePassword'] ?: "nopass")
			}

		}
	}
}

bintray {
	user = project.properties['bintrayUser'] ?: "nouser"
	key = project.properties['bintrayApiKey'] ?: "nokey"
	publications = ['mavenJava']
	publish = true
	pkg {
		repo = "jdrupes"
		name = project.group
		version {
			 name = project.version
			 licenses = ['LGPL-3.0']
			 vcsUrl = 'https://github.com/mnlipp/jdrupes-json'
			 gpg {
				 sign = true
			 }
		}
	}
}

apply from: "${project.rootDir}/gradle/eclipse.gradle"
 